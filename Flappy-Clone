import pygame
from pygame.locals import *
import sys
import random

#initialize pygame
pygame.init()
# set size of the game

screen_height = 700
screen_Width = 800
screen = pygame.display.set_mode((screen_Width,screen_height))



#define font
font = pygame.font.SysFont('Bauhaus 93', 60)
#define color
white = (255,255,255)

#variables
groundScroll = 0
scrollSpeed = 4
flying = False
gameOver = False
pipeGap = 160
clock = pygame.time.Clock()
fps = 60
pipe_frequency = 1500 #milliseconds
last_pipe = pygame.time.get_ticks()
score = 0
passPipe = False


#load images
bg = pygame.image.load("fbackground.png")
ground_img = pygame.image.load("ground.png")
button_img = pygame.image.load('fbutton1.png')


def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = 250
    score = 0
    return score


def drawText(text, font, text_color, x, y):
    img = font.render(text, True, text_color)
    screen.blit(img, (x, y))



class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        for num in range(2, 4):
            img = pygame.image.load(f"bird{num}.png")
            self.images.append(img)
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.clicked = False
    def update(self):
        if flying == True:

        #gravity
            self.vel += 0.5
            if self.vel > 8:
                self.vel = 8
            if self.rect.bottom < 555:
                self.rect.y += int(self.vel)

        if gameOver == False:

        #jump
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False:
                self.clicked = True
                self.vel = -10 
            if pygame.mouse.get_pressed()[0] == 0:
                self.clicked = False 

            #animation
        
            self.counter += 1
            flap_cooldown = 20

            if self.counter > flap_cooldown:
                self.counter = 0
                self.index += 1
            if self.index >= len(self.images):
                self.index = 0
            self.image = self.images[self.index]

            #rotate the bird
            self.image = pygame.transform.rotate(self.images[self.index], self.vel * -3)
        else:
            self.image = pygame.transform.rotate(self.images[self.index], -90)
      

class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('pipe2.png')
        self.rect = self.image.get_rect()
        #position 1 is from the top, and -1 is from the bottom
        if position == 1:
            self.image = pygame.transform.flip(self.image, False , True)
            self.rect.bottomleft = [x,y - int(pipeGap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipeGap / 2)]

    def update(self):
        self.rect.x -= scrollSpeed
        if self.rect.right < 0:
            self.kill()    


class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x,y)

    def draw(self):
        action = False
        #get mouse position
        pos = pygame.mouse.get_pos()

        #check if mouse is over the button
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        #draw button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action
        


flappy = Bird(100, 250)

bird_group = pygame.sprite.Group()
pipe_group = pygame.sprite.Group()

bird_group.add(flappy)

button = Button(screen_Width // 2 - 165, screen_height // 2 - 100, button_img)

run = True
while run:

    clock.tick(fps)
    #draw background
    screen.blit(bg, (0,0))

    bird_group.draw(screen)
    
    
    pipe_group.draw(screen)
    
    #draw the ground
    screen.blit (ground_img, (groundScroll, 575))
    #check score
    if len(pipe_group) > 0:
        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left\
        and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right\
        and passPipe == False:
            passPipe = True
        if passPipe == True:
            if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                score += 1
                passPipe = False


    drawText(str(score), font, white, int(screen_Width/ 2), 20)
    

    #look for collission
    if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
        gameOver = True


    #check if bird has hit the ground
    if flappy.rect.bottom >= 555:
        gameOver = True
        flying = False
    
    
    if gameOver == False and flying == True:
        
        #generate new pipes
        
        timeNow = pygame.time.get_ticks()
        if timeNow - last_pipe > pipe_frequency:
            pipe_height = random.randint(-100,100)
            topPipe = Pipe(screen_Width, int(screen_height / 2)+ pipe_height, 1)
            btmPipe = Pipe(screen_Width, int(screen_height / 2)+ pipe_height, -1)
            pipe_group.add(btmPipe)
            pipe_group.add(topPipe)
            last_pipe = timeNow

    
    #draw and scroll the ground
    
        groundScroll -= scrollSpeed
        if abs(groundScroll) > 35:
            groundScroll = 0

        
        pipe_group.update()
        bird_group.update()

    #reset
    if gameOver == True:
        if button.draw() == True:
            gameOver = False
            score = reset_game()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN and flying == False and gameOver == False:
            flying = True


    pygame.display.update()

pygame.quit()
    



